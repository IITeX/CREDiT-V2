type UserId = principal;
type TokenId = text;
type Time = int;
type Result_2 = 
 variant {
   Err: ApiError;
   Ok: record {
         Credential;
         NFT;
       };
 };
type Result_1 = 
 variant {
   Err: ApiError;
   Ok: Credential;
 };
type Result = 
 variant {
   Err: ApiError;
   Ok: NFT;
 };
type NFTMetadata = 
 record {
   attributes: vec record {
                     text;
                     text;
                   };
   credentialId: CredentialId;
   description: text;
   image: text;
   issuedAt: Time;
   issuer: text;
   name: text;
   recipient: text;
 };
type NFT = 
 record {
   createdAt: Time;
   metadata: NFTMetadata;
   owner: principal;
   tokenId: TokenId;
 };
type CredentialType = 
 variant {
   Academic;
   Achievement;
   Certification;
   Other: text;
   Professional;
   Skill;
   WorkExperience;
 };
type CredentialId = text;
type CredentialFilter = 
 record {
   credentialType: opt CredentialType;
   fromDate: opt Time;
   isRevoked: opt bool;
   issuer: opt UserId;
   recipient: opt text;
   toDate: opt Time;
 };
type Credential = 
 record {
   blockchainTxId: opt text;
   credentialType: CredentialType;
   description: text;
   documentHash: opt text;
   expiresAt: opt Time;
   id: CredentialId;
   isRevoked: bool;
   issuedAt: Time;
   issuer: UserId;
   metadata: vec record {
                   text;
                   text;
                 };
   recipient: text;
   recipientName: text;
   title: text;
   tokenId: TokenId;
 };
type ApiError = 
 variant {
   AlreadyExists;
   InternalError: text;
   InvalidInput: text;
   NotFound;
   Unauthorized;
 };
service : {
  createCredential: (credentialType: CredentialType, title: text,
   description: text, recipient: text, recipientName: text, expiresAt:
   opt Time, metadata: vec record {
                             text;
                             text;
                           }, documentHash: opt text) -> (Result_2);
  getAllCredentials: () -> (vec Credential) query;
  getCredential: (credentialId: CredentialId) -> (Result_1) query;
  getCredentialByToken: (tokenId: TokenId) -> (Result_1) query;
  getCredentialsByIssuer: (issuer: UserId) -> (vec Credential) query;
  getCredentialsByRecipient: (recipient: text) -> (vec Credential) query;
  getNFT: (tokenId: TokenId) -> (Result) query;
  getNFTsByOwner: (owner: principal) -> (vec NFT) query;
  revokeCredential: (credentialId: CredentialId) -> (Result_1);
  searchCredentials: (filter: CredentialFilter) -> (vec Credential) query;
  transferNFT: (tokenId: TokenId, newOwner: principal) -> (Result);
}
